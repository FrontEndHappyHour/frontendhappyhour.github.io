module.exports = function() {
'use strict';
const transcript = `

<p><strong>Ryan Burgess</strong><br />
Welcome to a brand new episode of the front end, happy hour. We probably at some point, interviewed at some rural, you know, you have to get a role somehow. Right. And so in this episode we were talking about how can we prepare for interviewing? I think each of us have taken different approaches. You know, we always love those great, like whiteboarding questions that we get to have to like, do in front of an audience and code on a whiteboard that you're not prepared for, like, come on, you see, you have to do some thoughtful prep for it. So yeah, we figured let's share some of the insights of things that we've done in the past, probably things that we wish we would have done like I know, there's times where I wish I would have probably prepared more than I have. So let's go round and give introductions of today's panelists. Stacey want to start it off?

</p>
<p><strong>Stacy London</strong><br />
Sure. I'm Stacy alumna, and I'm a senior front end engineer on Trello.

</p>
<p><strong>Augustus Yuan</strong><br />
Hello, my name is Augustus Yoon, and I'm a software engineer at Twitch.

</p>
<p><strong>Ryan Burgess</strong><br />
And I'm Ryan Burgess. I'm a software engineering manager at Netflix. In each episode, the front end happier podcasts. We like to choose a keyword if it's mentioned at all. In the episode, we will all take a drink. What did we decide today's keyword is correct. In practice, I actually almost forgot. I forgot. I was like, was it prepare crap? I don't practice. All right. All right. So if we say the word practice, we will all take a drink, thank jumping in would be really interesting to know how each of you have prepared for interviews in the past, or there's been some prep that you've done.

</p>
<p><strong>Stacy London</strong><br />
I think between the three of us I've probably interviewed the longest time ago, I think that the two of you have probably interviewed more recently than I have.

</p>
<p><strong>Ryan Burgess</strong><br />
I don't even think of that. But I've been at Netflix for probably longer. But even just last year, I went interviewed with a bunch of roles internally at Netflix, but even externally, like I was definitely doing a lot of interviewing, trying to figure out what's the right role for me long term. And I kind of forgot that how recent that was, it was just over a year ago,

</p>
<p><strong>Augustus Yuan</strong><br />
I'll say that I've been at Twitch for a little more than two and a half years now. But when I prepared for moving jobs, it was such a traumatizing experience for me, or very overwhelming experience with just typically how technical interviews have been. So I've definitely taken a lot of notes of how, let's say I want to make a career move in the future, creating like a study guide for myself. You know, people share their own study guides, but I personally took it upon myself to create a study guide, that things that I felt were really relevant to know, I think that's a big tip for everyone, like, you know, create a study guide for yourself. So and you know, just be mindful that, you know, one day you might make a career change, and it makes the prep simplified. So So with that said, like, I think now the prep would be a little easier. But it was pretty tough. When I when I first started preparing i i Just grinded the code. I just read, I bought Cracking the Coding Interview ctci I bought elements of programming interviews, I think I bought some books just to like get as many as much experience as I could see how tech Silicon Valley is interviewing these days.

</p>
<p><strong>Ryan Burgess</strong><br />
Did you learn that after the fact of interviewing, I guess this like, did you feel like you knew that going into some of the interviews? Like clearly you probably did that before twitch? But were there other interviews that you're like, Oh, I wish I would have done that upfront preparing.

</p>
<p><strong>Augustus Yuan</strong><br />
Oh, yeah. Yeah, I think I kind of knew it by underestimated just how expected it is you even know some of these questions that are just, I'll be honest, copy pasted from week code. Sometimes they're like mirror images of what you get on leetcode. And it's honest, it's, I don't know, I feel so mixed about it. Because I just don't feel it's necessarily an accurate way to evaluate someone. But you know, if that's how it is, then that's how it is. But I definitely regret sometimes you know, if I studied earlier, I might have passed some interviews that I I got rejected on would you ever think work at

</p>
<p><strong>Stacy London</strong><br />
those companies like knowing that that's the kind of questions that they cared about?

</p>
<p><strong>Augustus Yuan</strong><br />
That's such a good question. I would say like, reflecting now. I don't even really care. Honestly, like it's not a big deal to me. I would say probably at the time you know, I was kicking myself I was like oh my goodness if I just grinded more leet code are so ridiculous. Like, like, if only if I turned more problems into my head or something is as

</p>
<p><strong>Ryan Burgess</strong><br />
ridiculous I think it's funny too. I think Augustus you said something there is like, you know, you think that you'd be prepared enough just by the fact that you have experience working In this typical role, right? And the thing is, a lot of the times the technical interview questions are not always aligned with the type of work that you do. And I think that that can be tough. And for me, and I've been in similar situations, I guess is where I wish I would have prepared a little bit more. But going on some of the other technical interviews after learning that, it was like, I would just go back to CS problems. And like, think about that, and like, do research like almost Google, like, what are the interviews of like tech interviews being asked and, and practice them? Cheers.

</p>
<p><strong>Augustus Yuan</strong><br />
Ayers

</p>
<p><strong>Stacy London</strong><br />
said, you started to like, keep notes of like, what your secret your own study guide? Does your study guide? Was it like, before you started doing the interviews, you had things in your study guide. And then after you started doing the interviews, you sort of like refined your study guide to be like, Oh, actually, these are the kinds of things I'm being asked. So if I ever interview ever again, like make sure to focus on x.

</p>
<p><strong>Augustus Yuan</strong><br />
Yeah, I actually. So this is very specific to me. But what I would be pretty in depth, I will record what questions were asked. And sometimes I just go through them again, like let's say I wanted to re interview at that company. I would just look at what question was I asked before and see if I could do it again. That was like one thing I did. But yeah, I did kind of refine my notes, I guess I'll give like, these are some things that I took from Cracking the Coding Interview, and some of these books, I actually have two different study guides that I prepare, which I think is very useful. One is for behavioral, and one is for technical. And so for behavioral I, I highly suggest this, you know, if we're giving tips, this is something that I wish I knew, but I started doing now is if you're a new grad, I think it's still worth doing. But taking a look at look, just look up very common behavioral questions you can be asked in an interview, these are questions, you can find them very easily. They're like questions like, tell me a time you've had a disagreement with a teammate? How did you handle it? And really, like focus on what projects you've worked on, or situations that you've worked on, that you feel can speak to those questions, and do the star table treatment. And so what is star star stands for Situation task action results. And these are the four things that you really want to be hitting. When you're giving an answer to an interviewer. I'll just be straight up honest. Some interviewers literally look for star there, they're asked to say, what was the situation? What was the task? What was the action? And what was the result? And so these, these are things that I just created, like a template of here's a project that I worked on at Evernote at Twitch. And for this question, here's the here's the star for it for this question. Here's the star for it. And I honestly that once you do it, once you make it, when you go interviewing, you just reread it and it should just like click for you. Because, you know, it's your experience, right? It's very easy for you to remember it. And I think that's just something invaluable to have for your preparation. I like that really good advice. Yeah, it's funny, because I actually didn't make it before until there is this one interview? I did okay, on the technical interview questions. And then I actually totally bombed the behavioral because I totally forgot I studied so hard on technical. I told myself, I got this, I remember these projects. And I just was I expecting a behavioral question. And then I kind of was trying to map projects in my head that might apply to that question. And, honestly, if I just took the time to really tell myself, okay, here are some of the projects that I've worked on. I could have answered that question way better. So don't overlook it, you know, it's very easy to overlook you, you'll tell yourself, I got the behavioral, that'll be fine. You know, I've done these a million times, I really need to be churning out technical study guides or something. But definitely put some time into the behavioral

</p>
<p><strong>Ryan Burgess</strong><br />
thing. Another thing that I've found useful, is looking at the people that you're going to interview with to like, really think about who you're interviewing with. And like that's usually given to you in some shape or form in like prep before the actual interview can tell you a lot like sometimes it can just like tell you about someone's background and how you might make a connection with them. But also, just like the types of questions that you should ask that person. That's another one. Think about the questions that you should be asking each person on the interview. Like that's important, too. I've definitely had people show up and not ask questions. And that actually gives me a lot of pause because I'm like, wait, you have no curiosity about anything. And maybe they have all the information, but I usually I think that that's doubtful It's also like, even if you've heard someone else respond to the exact same question, it might be helpful to hear someone else's perspective on it. So I think that is good is like show up prepared questions and be you know, think that you're also going to gain more information about the role and the company and the people that you might be working with. But yeah, looking at people ahead, am I talking with a VP? Am I talking with an engineer? Am I talking with a designer and like, you can think about those things like with the designer, you're like, Oh, I'm probably going to be covering how I collaborate with them. And thinking strategically around that can tell you a lot just like sitting down and thinking about who you're interviewing with. Doesn't take a lot of prep time. But just that little bit can go a long way.

</p>
<p><strong>Stacy London</strong><br />
Did I ever tell the story on this podcast of the Google interview and the guy with his angry blog post and how I read it, and that helped me prepare for the interview?

</p>
<p><strong>Ryan Burgess</strong><br />
Yes. Yes, I remember that. Because like, you knew this guy's like rants and like was, okay, okay.

</p>
<p><strong>Stacy London</strong><br />
Yeah, it's like super mad that someone can, like super quickly can do like hexadecimal or decimal conversions of something. And so like, I studied it, because I like, read, read that he was gonna, he's like, he's my interviewer, I'm going to look him up, found this blog post found that he got really irritated that people couldn't do it. So I studied it. And I did it very quickly. And then he was like, That was really fast. And I'm like, Yeah, you get angry about it. I have read your posts, like, of course, I studied it ahead of time to try and figure that out. Looking back, it was just like that blog post was a red flag. Like, I don't want to work with someone so angry, but

</p>
<p><strong>Ryan Burgess</strong><br />
probably Yeah, I was gonna say it's like a red flag in itself. But you prepared really well, from that. I tried. Do your research upfront, right, like that does go a long way. It's funny. The odd time I've been quoted from like things I've said on this podcast, or things where I'm interviewing candidates, I'm like, Well, they did their research. So that's cool. I don't remember saying that. But I probably did. Oh, another one, like we mentioned, you know, I mentioned researching individuals that you're interviewing with, I think a lot of time people don't put the effort into research the company, you know, you want to understand who you're working with, or who you're working for. But I think like also understanding like maybe what they're investing in, like the stock market, how they're doing, if there are a public company, or what kind of tech blog posts, do they have those types of things can go you can learn a ton use that information, like, just do a little bit of that research, it will tell you do you actually want to work for this company, but it also might give you some insights into the company or even questions to follow up on to kind of that point where I think you should ask questions. We talked about technical versus behavioral or cultural I feel like culture fits settles a little bit more with me. What's one? Which one's harder?

</p>
<p><strong>Stacy London</strong><br />
Technical? For me? Yeah, personally. Yeah, cuz like the other ones, I think that I'm more easily able to just like, have comfortable, like, it doesn't stress me out to think about talking about the work or the projects that I worked on, or like those behavioral things to me that, for whatever reason, like that doesn't make me feel stressed out. I think some people have the opposite reaction. They prefer just like, cranking out code and not talking. But the opposite is true for me, I think. And so like, for me, the title of a part is always harder. But that's it that's just like a symptom of tech interviews in general is that you're just doing a thing that's very different from how you normally are, like your daily job, and how you code and how you work with your teammates, is often very different. And not at all related to how technical interviews go. So it's, it's like putting yourself in a very different situation, high stress, someone's watching you, you're trying to like talk through code as you're writing code, which is also like a thing I never do in the real world. Like, it's just, it's a lot kind of happening all at once. And it's high stress. And that's why a lot of people hate technical interviews, because it is not necessarily representative of how things are once you actually have a job.

</p>
<p><strong>Ryan Burgess</strong><br />
You don't have your awesome like music in the background, Stacy, where you're like coding, like zoning out, listen to some good tunes. Exactly. I mean, it's true, though. Yeah, I think that it is tough. Like I would actually side with you on I find the technical one harder for some reasons where I feel like the behavioral or culture ones, it's either you hit it or miss it in some way. So I guess like, but you're talking to it, and you can kind of get a sense like, maybe I've just also learned to read people and I can get a sense for like, what's the type of response that you're looking for? Yeah, and like, how should I kind of respond to that question? And technical that's somewhat straightforward to write like, it's like, you know, either it's right or wrong and like, what are you looking for, but I do find that it's the kind of the scenario that you pick painted to is that you're not in your like everyday coding situation where you perform, I'm sorry, but like writing code on a whiteboard while someone stares at you, oh, I can code on a whiteboard if my life depended on it with nobody watching. And then I've got people that are clearly judging me, we are an interviewer. And so I think that that added pressure makes me probably perform that maybe if I'm lucky, 50% of what I normally do, right, like coding. And then a lot of the times I've had the interviews where they do ask algorithm or binary tree problems that I can solve, but I don't know that I don't feel like I'm confident, like, I'm not like, wow, like, I'm the best at solving this. Because that's not my day to day that I deal with. And so I know when I've done those technical interviews, I'm, I probably showed up on like, you know, maybe I pass barely, like, it's not like, I was like, Well, I blew them out of the water. But I don't think that that's indicative of how I code or how I show up on a technical project.

</p>
<p><strong>Stacy London</strong><br />
Yeah. And I think it goes back to that researching the company. Advice from earlier is, you know, if you know what your strengths are in interviews, or what you're like, maybe good at or not so good at, it can't hurt to like research. How does this company that I'm about to interview, like, how does their interview process work? Do they do terrible whiteboard interviews? Why do they do them? Like, maybe, you know, find out beforehand, like that's how they do things. And maybe that would help inform like, how you prepare, or whether or not even interview with him at all? That kind of thing, I think is pretty huge.

</p>
<p><strong>Ryan Burgess</strong><br />
Also, like, I feel like a lot more companies are giving like choices on the type of thing. Yeah, like, would you prepare, you know, would you like to do a take home exercise? Would you like to code on a laptop versus a piece of paper versus a whiteboard. And it's like, you know, using the tools that you use on a daily basis goes a long way, or being able to Google things. That's awesome, too, because like, our memories are not perfect. Writing a perfect syntax is not always that easy. But like, if you can look that up, it's like, you know, what you're searching, like, we all know how to be really good at Google searches or StackOverflow searches. That's a skill, like, you're still producing, like what you need to produce. It's just, we don't always remember those, like, little nuances. And I think so companies recognizing that, I think has really helped, but it's still not perfect. I 100% agree with you that I think it's still somewhat broken on how we evaluate that technical, it just doesn't quite work. But at the end of the day, I also get it I'm like, Okay, well accompanies trying to evaluate 10 candidates, or whatever the number of mount that they interview with, it is a way to evaluate someone's code. And unfortunately, someone who shows up better in the interview does better. And so it doesn't work. It's it's frustrating.

</p>
<p><strong>Stacy London</strong><br />
And now the whole, for years and years now, I've been contemplating this question of like, everyone hates these technical interviews that complain about them. They're very stressful, they don't seem to necessarily always produce good signal, like, plenty of people pass capacities, technical interviews, and then are not actually good employees and good teammates. It's just a complex problem, because we're not, you know, we're not robots, machines that can, you know, humans come with history and emotion and all sorts of additional things. So it's interviewing is very imperfect. And I all these years of thinking about it. I'm like, trying to think of any sort of alternative. Like, if we don't do this, what can we do to try and assess? You know, someone or get a sense from them? And I've heard of some alternatives, like, have someone prepare a presentation and talk through a code that they've written in project, because not everybody's code is public, right? Like, I don't have a lot of public code. My code exists in companies repositories. But maybe you could like, show some of the code that you've written and talk about the project. And in that way, at least, yeah, yes. You could probably fake that. I'm sure. Probably someone could be sinister. But like, you probably pick up on that pretty quickly. If they the way that

</p>
<p><strong>Ryan Burgess</strong><br />
they will, you definitely will. Yeah, and like the follow up questions and things that you ask, like, you will definitely pick up on that. I like that. I mean, seriously, if people read my public code, I don't think that's probably a good example of my code. Because it's like most of it is just like, you know, there's smaller projects. I'm like, Wow, maybe I should do better on that. But like, so that's fair to is like and not everyone can share open source work or the work that they're doing. So that's fair to I like that is like pick a project and speak to it and like, understand, you should be able to speak to like the work that's been done. Even the work that you may not have done because it's not just you that did it. There's probably multiple, like, team members that you worked with. And you can talk to that too. And I think I like that actually a lot as an example. I feel like I'd be able to do follow up questions to assess out some of those back and forth. And, I mean, if someone tries to fake it really hard, that's not going to last long on the job, either. I mean, it sucks for everyone involved. But that Yeah, could happen. Yeah,

</p>
<p><strong>Stacy London</strong><br />
that was yeah, that was one one idea. I thought about that might be something different from what we've all all been trying.

</p>
<p><strong>Ryan Burgess</strong><br />
Yeah, we know that. It's not perfect. But it You're right. Like you only have so much time to assess someone. Right? And, and then they also have time to assess you as a company. Like, I always need to remember that too, is people are also interviewing the company is like, do I want to work here? Is that like, is it a mutual fit?

</p>
<p><strong>Stacy London</strong><br />
Mm hmm.

</p>
<p><strong>Ryan Burgess</strong><br />
I know, like Augustus prime example you'd spoken to like how you've pivoted and things that you do to prepare for interviews? What have you each learned that has maybe changed or made you adapt to how to prepare better for the next interview?

</p>
<p><strong>Augustus Yuan</strong><br />
Yeah, I can go first. One thing I want to call out is, you know, especially being the front end, Happy Hour podcast, I'm sure there's a lot of front end engineers that listen to us. And it's very interesting, because I feel like as a whole, Silicon Valley has kind of just decided, you know, what, it's easy, easier to just ask, like algorithmic or these types of questions that, you know, you might not really encounter as a front end engineer, you might be expected to be asked more about how would you build the UI for something like this? So. So that's definitely one thing that I've kind of taken away. When I'm applying for a role. I'll try to clarify with the recruiter, you know, what are they looking for in this role? And I'll even sometimes try to ask, Oh, what are the type of questions you if you're allowed to share, that they might ask for this role, and you'd be surprised how many times they'd be willing to share, you know, I feel, I feel we're definitely on a much better track than we are a few years ago, like a lot of companies will have study guides now that they'll prepare that they'll have for you. And at least that helps kind of narrow down the scope of what you might need to prepare for, I'll just be 100% honest, when I when I've applied for front end roles, I've gotten a very mixed bag, there have been times I've had to build a website page, you know, they say, write HTML, CSS, and now they're very understanding, right? Like, they'll just be like, Oh, build me a basic form, and taught and, you know, there's little bits of everything, HTML, CSS, JavaScript, and then I've gotten totally like, on the other side, like, implement a hash table for me. And your language of choice, which is just, you know, at the time was not something that I would say I had the familiarity. I've always still, I don't know if I could still do it, you know, in an interview setting, right? So I would say definitely take the time to just clarify what you should be expecting. And then you can, it'll help preparing a lot easier.

</p>
<p><strong>Ryan Burgess</strong><br />
A lot of good advice there. Like I honestly think that the asking interviewers, or critters, hiring managers, whoever is that, like, what should I prepare for? What are the types of questions that are going to be asked of me? Those are questions you should absolutely ask because it's not even that people are giving away like all this information, it's people want you to succeed, they want to set you up for success, you know, and just giving you some of that information ahead is is going to help you prepare, but I think it's such a like, that's such a great piece of advice that not everyone follows. And it's just like, yeah, so I'm talking with these two engineers, like, what are the types of things that they're going to be covering? I'm talking with the lead designer on this project? What are the types of things that you know, I should be thinking about when I'm speaking with him on or her that that to me is so powerful?

</p>
<p><strong>Stacy London</strong><br />
Yeah, that's huge. And even into sort of, I would say, like the same advice, my small tweak on it is, one thing I learned is ask how you're being evaluated. So on one of the technical interviews that I did, I ended up focusing a lot on, like accessibility and responsive and making it really nice that way, and a little bit on performance, but not a ton. But then I found out later that the evaluation was weighted a lot more heavy on performance like was did I create a performance solution versus those other things. And so that didn't matter as much to the interviewers that those other things were nice. And so if you can get that answer out of them, that's huge. Because then you know, where to like, kind of show them during that technical interview the things that they care about,

</p>
<p><strong>Ryan Burgess</strong><br />
and it helps you like, prepare that to write like, Yeah, think like that. You're thinking about all those things going into it, which I love. And so yeah, I don't think it's like you're getting insider information. It's like yeah, these people They're like, yeah, sure, this is the types of things we're going to cover. So and hopefully

</p>
<p><strong>Stacy London</strong><br />
you've been asking us questions is a good like indicator for them as well. Like the fact that you're even thinking about those things. Hopefully, it's a good signal for them that you're, you know, this sort of your thoughtful engineer person that really like, tries to plan and prepare and be ready. So like those, it just, it can't hurt to ask.

</p>
<p><strong>Augustus Yuan</strong><br />
Yeah, if I can just like scream like plus 1002, to both of what you said, like, especially to what Stacy said, Okay, dynamic. For those who of you who aren't aware, there are some questions called DP dynamic programming, which are very, very involved solutions, that I would not expect anyone to be able to figure out on their own an interview, but you'd be surprised how often you get asked these questions. At these bigger companies, on these TP interview programming questions, you can look some up there are very famous algorithms designed around these programming questions. You'd be surprised how many people ask these questions. And you do not have to get the TP solution. Because really, they're just looking for your thought process. And the and very, very normally, for these TP problems, the way to figure out oh, there's a DP solution to this is to do the brute force method, which is very dumb, very ugly, and we're all taught that you should not like brute force is going to get you an F in school or something. Right? And interviews, you know, that is a very net and even on the job, it's a very natural way to approach the problem, like, Okay, let's get a solution. It's not performance, but we can we can tune it as we go on. So definitely clarify. I like just frickin plus 1002 SEC said like, definitely clarify with the interviewer like, what are they looking for, like is susceptible or whatever,

</p>
<p><strong>Ryan Burgess</strong><br />
those follow up questions, like, they honestly go so long, like an Earth goes so far. Like, don't just jump to solve, like, if that was some advice that I've seen and given to a lot of people that are interviewing at Netflix, it's like, yeah, like, don't just jumped to solve, think about it. Like there's always edge cases understand and ask those types of questions, even to that point is brute force acceptable, just like don't make assumptions, call it out and really work collaboratively with the person interviewing you, they might be like, no, like, I get your heads, like brute force is probably not the best thing to do in this scenario. But I like your thinking, you know, because it is you're walking through people through your thought process and how you're tackling a problem that goes a long way. Even if you don't solve the problem properly, like that could actually be better. The fact that you just walk through the details that you're walking through or planning in your head, and the

</p>
<p><strong>Stacy London</strong><br />
companies that care about that are probably the companies that will be going to be more collaborative and better to work at than the ones that are like, I only hire the most technically correct person in the interview. Like, it's, to me that's like, it's an interesting signal.

</p>
<p><strong>Ryan Burgess</strong><br />
That's a good point, too. Because like it goes back to like, I think I'd made the comment earlier is like, you're also interviewing the company, we're working in a pretty great industry as being software engineers, is that we are fairly highly in demand, like people are the companies are constantly interviewing. And so I think that's always something to think about, too, is like, where do I want to be in Word, you know, what's the right fit? For me? That's important. That absolutely is,

</p>
<p><strong>Augustus Yuan</strong><br />
yeah, like to echo something that you said, Ryan, you want a company that is looking for your success. Like, actually, one thing that someone told me was, of how to think about the interview process, the phone screen, is they're generally trying to filter people out, you know, because it's very low. It's very, like, you can just do a lot of them and you want to filter people out. But when you get to the on site, you're not you're, you're changing your perspective, as an interviewer, you should be changing your perspective, not as filtering people out, but you know, trying to see the best of them, and what they're capable of. And in that, you really want to set them up for success. You want to see like, how far they can go and be able to match them with the right place. Like it's really a formality is what my peers would tell me to frame think of it as, you know, you want to help them as much as you can. And, you know, if if at the point where you know, so much help, they still can't get it, then you know, you need to call that out in the review and stuff like that.

</p>
<p><strong>Ryan Burgess</strong><br />
That's a great point. You know, before we dive into pics, like I always think like, you know, we've we've probably unloaded a lot of amazing pieces of advice. Like I know I've like said a lot of things that I would give people advice for interviewing and I know each of you have, but like what's one piece of advice if someone asked you like that one thing I'm interviewing tomorrow, what's the most best piece of advice you could give me? What would you share?

</p>
<p><strong>Augustus Yuan</strong><br />
I would say if you're interviewing tomorrow, just take a deep breath. Do your best. Do some light review on what you've been studying. Don't forget that behavioral, but just do your best and and definitely echo Ryan, what you've been saying, remember that you want to be evaluating this company as much as they're evaluating you. Yeah, at the end of the day, like when there's only a day left, you know, burning yourself out and cramming stuff in isn't going to help you just take a deep breath, you got this just a reminder, you you're an engineer, if you're a new grad, then you know, you're you went to college, and you you're a pro, okay, for what it's worth, you are qualified to be an engineer, I Hi. I guarantee it. Okay, don't let a company that rejects you determine if you're an engineer or not? Because it does not mean that at all, it just means that 80 means a bunch of things. But it does not mean that you're you're not qualified engineer. I guarantee you are and you have the potential to be. So do not have that as a takeaway. Yes, do your best you got this?

</p>
<p><strong>Stacy London</strong><br />
Yes. Yes, try, try not to tie yourself worth and who you are to the results of these interviews, because some really amazing people I know get turned down from companies, I've gotten turned down a lot. Like it's, it's hard, it's hard to disassociate that from your self worth. And especially if you kind of value what you do or really like what you do, it's hard to decouple that. But there's so many other factors that play could be, the interviewer had a bad day, and then you know, just a million things that are totally not under your control. So, don't get discouraged. Interviewing is way too hard in this industry. So keep your chin up, you're gonna do awesome somewhere.

</p>
<p><strong>Ryan Burgess</strong><br />
I love you guys both had such great advice. But yeah, I love that too, is that it is hard. When you get turned down, I'm going to add a piece of advice for getting turned down. And then maybe one for like the Prepare part. If you do get turned down from an interview, ask for feedback. You know, you put a lot of effort into that interview, you know, it is I almost say like interviewing is a full time job. Like there's a lot that goes into it and ask for feedback. I understand like how you could have done better. And maybe you interview with that company again in the future. Or maybe it's just applying that feedback to a completely different role at a completely different company. But I think it's helpful to hear that feedback. And not everyone wants to hear feedback. And that's okay, but like, I think that it is very helpful. So at least you know how you can do better the next time. And my other piece of advice was going to be for me, a lot of it too is is thinking about like company culture and like really understanding how you fit in into that company and asking questions around that to like, don't forget things like work life balance questions like what are the factors that are going to make you excited about working at said company and two, I think your points to that you've all said is like yeah, when you're evaluating this company, do they meet the requirements that you're evaluating to make sure that you get those questions answered? Because that's that's super important to make those decisions. And so I think just remembering those types of things can go a long way. All right, well, in each episode, the front end happier podcasts we like to choose pics of things that we found interesting want to share with all of you Let's go around and give pics for this episode. Stacy want to start it off?

</p>
<p><strong>Stacy London</strong><br />
Sure. I've got two music picks today the first one is I Kuma by fallen you okay? And ghost culture. And it is sort of an electronic track that layers in some vocals from from folly. So it's West African roots. It's super fun and kind of dancey fun track. There's there's vocals there. So I don't know about how good it is for coding if you're trying to concentrate but it's fun to listen to. And the second one is rotating in unison Bye. Hi. This is highest Tenille throttle. She's a London based DJ producer. She described the song as to highlight beauty and coexistence as we all rotate around the sun and to try and remember beauty and calm in a time of uncertainty and unrest even just for a few minutes. And it's a kind of an ambient, chill glitchy track. I guess maybe it's the best way to describe it.

</p>
<p><strong>Ryan Burgess</strong><br />
Nice. I always love the descriptions. I've probably said that a million times because there's always just add so much more entertainment or depth to the music before even listening to it. I guess what do you have for us?

</p>
<p><strong>Augustus Yuan</strong><br />
Oh, yes, I have two picks. One kind of a shameless plug but not really. I created a just some technical interview prep that I always do when I'm preparing for interviews. It's a little front end focused, but I kind of cringe but I do have some algorithm kind of common algorithm section. because they come up so much in my experience, and I'm trying to build it out more, but I wanted to share it in case it's helpful for others. And you know, if it's not, then, you know, you can just throw it away or something. But I thought, I think it's nice to share. And I would actually, if I would love to hear, maybe share with the front end, Happy Hour Twitter, what study guides you you all have, because I think, you know, let's all collaborate on this. Because I mean, it's all like we're giving answers anything, but I think we're all just really just trying to be the best engineers, and we can showcase that to companies. Well, let's be honest, we all we all are excellent engineers in our own right, we just need to be able to show that and then my second pick is a YouTube video on the dune movie, if you haven't watched tune, holy crap, you should watch it like that. That is an informal, third pick. But this pic is a YouTube video by the vanity. And they do a breakdown from Denis Villeneuve. I hope that's I'm saying that right, the director of one of the scenes and it is just incredible. How much thought he puts into just one scene. One scene is a 10 minute explanation, a breakdown of all the thought he has. And you can just tell how passionate he is when he created this movie is just so incredible to watch. So highly recommend that

</p>
<p><strong>Ryan Burgess</strong><br />
nice. I still have to watch dude, I've heard I've just feel like I don't even know anything about it, to be honest at this point. But everyone's talking about it. So it feels like one of those ones where I'm just gonna have serious FOMO I should probably go watch it. It's like the same people who haven't watched squid game. It's like, oh, what's going on? Everyone's talking about it. I feel like Dune is the next thing. So I may have to watch that Augustus. Alright, I have two picks. One is a season on Netflix. You season three is really, really good. I enjoyed the first two seasons. The third one, I was kind of like, are they gonna be able to keep this like momentum going even after the first season, I wasn't quite sure. The third season is very unique and interesting. The dynamic between the two characters is it's just interesting. I highly recommend checking out that whole series if you haven't watched it. But if you have season three just recently came out, it's really good as well. And then my second pick is Natla phi Natla. Phi is awesome. It is so easy to host like, I feel like we've gotten so much better over the past years of hosting websites and web applications. I tested out Netlify a long time ago, but recently just moved a lot of websites including the front end happier website to Netlify. And I was just so pleasantly surprised how easy and seamless it worked. Even things like adding HTTPS. I'm like, oh my god, this is so painless. Like it was so nice. I highly recommend trying it. I know there was things like Heroku in the past has always been fairly good. Some of my sites were still on like some really old hosting then I was finally like, I got to make my life easier. And and it has so I highly recommend checking out Netlify they don't sponsor us. It's a good it's just a good plug. I think it's great. So go check it out. Thank you for all listen to today's episode. You know, if you like our podcast, give us a rating on Apple podcasts, any of those like let us know how we're doing. It also helps others discover front end Happy Hour podcast so we appreciate that. You can find us at front end happy hour.com or on Twitter at front end. Ah, any last words

</p>
<p><strong>Augustus Yuan</strong><br />
practice makes perfect.

</p>
<p><strong>Ryan Burgess</strong><br />
That was perfect.

</p>
`;
return transcript;
};