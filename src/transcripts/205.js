module.exports = function() {
        const transcript =`
        
<p><strong>Ryan Burgess</strong><br />
Welcome to a brand new episode of the front end happy hour. Boot Camps are an excellent way to learn software development, and there have been many successful people who've gone out to be software engineers after graduating a boot camp. The only problem is is often some of these skills that are required in the jobs aren't necessarily covered in the boot camps. In this episode, we are talking about what some of those skills are, and creative ways to maybe obtain those skills to help you find a job after graduating a boot camp and to help us with the conversation, we are joined by Shashi, a software engineer from Microsoft. He is deeply thought about this topic, and has some creative ways to maybe figure out ways to build up that experience. So without further ado, Shashi, thanks so much for joining us. Can you give a brief introduction of who you are, what you do, and what your favorite Happy Hour beverages? Yeah.

Shashi Lo  
So I'm Shashi low I'm a senior UX engineer at Microsoft. Currently on my team, I work on the Azure pricing calculator team. So work on a lot of different teams, doing a lot of calculations and working with a global team. If you make any mistakes like even $1 you're losing 1000s and millions of dollars. So it's very, very costly, so a lot of testing and a lot of things involved. So it's been really great to be on a team and all of that. And my favorite beverage, I have this, but that's actually not my favorite. That looks good. My favorite is this guy.

</p>
<p><strong>Ryan Burgess</strong><br />
I love it, the happy daddy. Dad. Oh, hey, you got it. There you go. Happy dad. I like that.

Shashi Lo  
It's a happy dad. I'm a happy dad. I'm a father of four. Plus. I love this drink. It's it tastes like juice. So, so good, nice,

</p>
<p><strong>Ryan Burgess</strong><br />
probably good on a nice, hot day too. So totally, this episode is sponsored by Wix studio devs. This one's for you. I've got 30 seconds to tell you about Wix studio, the web platform for agencies and enterprises. So here are a few things you can do in 30 seconds or less on studio, integrate, extend and write custom scripts in a VS code based IDE, leverage zero setup, Dev, test and production environments. Ship faster with an AI code assistant and work with Wix headless APIs on any tech stack. Time's up, but the list keeps on going. Step into Wix studio and see for yourself, all right. Well, it's Augustus, and myself for panelists, Augustus, you want to give introduction? Yeah, sure. My

</p>
<p><strong>Augustus Yuan</strong><br />
name is Augustus. I was an ex software engineer at Twitch. 

</p>
<p><strong>Ryan Burgess</strong><br />
And I'm Ryan Burgess, the host of front end happy hour. Well, I think let's dive in. I'm excited for this topic, just mainly because I think, like, one of the hardest things, it's not just boot camps. I think, like, if you even went and got a full CS degree, or some sort of degree, anytime, it's really hard to get that first job, right. Like, it's like, people are looking for experience. Well, how do you get experience? You're like, I just got out of school. I need someone to hire me. And so I thought like to start with is like, maybe, can we each kind of talk about, like, our experiences with boot camps, or, you know, dealing with graduates, people that we've worked with. I don't think any of you've been to, like, actually graduated from boot camp. I did not. They didn't even exist when I was going to school, but I think we've all worked with people or interacted with people, and I'm curious, of like, you know, what's the experience been like? Yeah,

</p>
<p><strong>Augustus Yuan</strong><br />
I can start. So my experience with coding boot camps, especially is more from my mentorship side. You know, when I was at Evernote, we would sometimes have interns that come in, or even at Twitch, you know, sometimes I'd work with people who came from coding boot camps honestly, like, I think, I think there was an old episode where I said, Oh, you know, I think coding boot camps there's still a lot of fundamentals that are lacking, but my opinion has changed a lot over the few past few years. I feel a lot of people who come from coding boot camps are actually very, very, very solid. They get a lot of practical experience with the most cutting edge stuff. I think that's like, one big thing that I've kind of noticed is, like, tech changes pretty quickly. Sometimes, like, you know, like React, and I'm so happy that React is still very dominant front end framework. But like, things like next JS Vu or svelte kit. Like, all these things are coming out. I think a lot of these boot camp people who are in the more recent Boot Camps are getting exposure to and they also still like get to build pretty full fledged projects. Like they kind of just dive right in. The thing that I've noticed, that I still think is a thing. And this is more of a nature of how quickly the boot camps go, like, sometimes they don't always know the why for certain decisions, like, some, maybe some of the history, I'm sure. Like react, it's, it's crazy to think react now has a history of, like, of what it used to be, you know, now there's hooks now react 19 is out like, it's like, moving more to the reactive of of how reactive way of things, and it's just kind of crazy that there's all this history to react in. I don't know. I personally do not know how much of those coding boot camps are teaching right now.

Shashi Lo  
Yeah, that's, that's great. That's great point. August, this like, I feel similar, but indifferent at the same time, I like that they're learning like the most cutting edge technologies and things that are out there. But I think when you come to work for a company, especially a big core company, too, you know that a lot of the products are owed and there's a lot of legacy code and processes and third party applications that you're like, wait, you haven't used this before. No, we don't never thought that like Redux, right? It's like, Wait, what is Redux? Like? Yeah, I'm gonna have to teach you the Redux, really, but, but at the same time, the biggest thing for me when I was interviewing and working with boot campers was process right, understanding the process of taking a feature and implementing it, and also just asking questions, like, like, I feel like a lot of individuals that not just boot campers, but a lot of juniors and self talkers, they feel like they have to come be Superman, to come in and like, implement a feature flawlessly without asking questions, and like, fully understanding the scope and everything and it's it's impossible to do that as a boot camper or even a junior. There's just too many variables that they don't understand yet. And I can speak about the interview process too. When I was in the mid Upper Midwest, in Minnesota, there was this boot camp that we interviewed individuals, and I hope it's changed, but when we interviewed them, it was like we're interviewing a robot. Every one of them had the same answers. They they they were prepped to answer questions the same way, the same fashion, everything, and it was very hard for us to distinguish, like, who actually had the skills and who didn't. And so that that piece alone, I was like, Oh, I wasn't in favor of that. I was totally in favor of them learning stuff and go to boot camp to learn how to code quickly, but I think there was still a lot to learn after that.

</p>
<p><strong>Ryan Burgess</strong><br />
Do you think in that point there? Do you think Boot Camps are like starting to realize that they need to help people to try and find that job? So they're actually like teaching you how to interview? Yeah?

Shashi Lo  
I do think so. Yeah. I think that's one of the biggest things right is placement. Some of the boot camps say, hey, we have a 90% placement rate, and then, yes, you might, but like, it's just It depends, right? There's so many variables between there and so think that's why there's some heavy emphasis on the interview process, how to interview, how to ask the right questions, how to code properly. But as we all know, as you focus so much on the interview piece of getting it, when you get the job, it's, Hey, you did so great interview. Here's a feature for you. Go take it and go get it done. They can't do it because that's the skill that they learned. They didn't learn the day to day skill. They learned the interview skill. That's a really

</p>
<p><strong>Ryan Burgess</strong><br />
good call out. Like, I see why Boot Camps are gonna, you know, spend time doing that. I don't think it's wrong to spend time on, like, how to prepare for interviews, what to expect. Like, you know, Hey, you are gonna get coding challenges where you might have to write on a whiteboard, or, you know, you have to work on some coding exercise that you're just not familiar with, and like you're kind of doing that on the fly. And so I think preparing people for that is amazing. I think we all prepare for them. Like, anytime I've interviewed, it feels like I have to redo it all over again. Like it's like, even though I have those skill sets on a regular basis to actually do the job, it's like interviewing is a different type of mindset. So I like that they're doing that, but you've called it out really well too. Is that, I also think that you're probably going to be a better Interviewer If you have the experience, right. Like, I often think about like, asking people the questions, like, Oh, tell me about a time when you ran into a challenge where you're working on a project. Maybe it was a difficult challenge with a on a technical side of things, or maybe it's a challenge with a colleague, right? You're some you know, you have a disagreement on the approach and like, how do you, how do you deal with that? And it's those types of things. Is like, no real interview prep. I mean, I guess you could prep for those types of questions. But like, what I really want to know is, like, how do you deal with. Those situations. And so some of it could be from experience, but it might even just be like, Well, this one time in my boot camp, I was working with, you know, Augustus. And Augustus, he was, he was a tough partner. He liked, you know, he was big into leveraging some old school J query, and I wanted to use React and like, you know what I mean? It's like, you could see how something like that plays out, and you can kind of talk through it, but I get the point. It's like, I think what we're missing is the experience Shashi. Like, that's the big piece that you're probably getting at is, and how do you get that right? Like, how do you actually get experience? And some of it is just by working on things together, collaboratively, sharing code with people and getting their inputs, doing code reviews, things like that, is very much that experience. And so I think sometimes boot camps, or as a junior, any of these courses, they don't really teach that. Is that a correct way of thinking? Oh, yeah. 100%

Shashi Lo  
I feel like that is one of the missing pieces for boot camps is, I know they do like group projects and whatnot, but every boot camper I've talked to, when they do their their group project, there's no like experience lead to lead them to put a process together, to code review their stuff. It's, kind of like a hackathon where, oh, it works. Get it up, get it merged. We're good. Let's just get it out there quickly and get it done, right? Opposed to, hey, I'm sorry, but this doesn't meet our coding standards. You're missing this type. Please go add a unit test, you know, for this functionality, things like that. Oh, this logic you created. There's a simpler way to do that. Please do it in this fashion, this way, because it's going to be more efficient and it's more legible and all of that, like the and then the biggest things, one of the biggest things, like, I always ask my juniors is, hey, Alpha patines, your props and everything, right? Like, these little things make a difference when you're reading code, but unless somebody is telling you and redirecting you, you're just gonna continue to think, Oh, my this is this is correct. I'm gonna continue to move forward, and I'm just gonna learn to continue to code and use other technologies, because I think I've mastered this. But in reality, there's every company, every person has it as their own coding style standards, and if you can't meet those, then you're going to have to conform to them. And when you go for a company, definitely every company has their own standards, and if you can't conform to that, you will eventually need to, and somebody will stop you and say, Hey, like you need to do it this way, because this is the way that our code, our coding structure, is built. And I feel like that's one of the biggest things. Is the instant that feedback. A lot of boot campers I talk to feel that when they go and do these group projects or learn their own it's like, oh, like, it's easy, because I can improve it myself. I get it up there, it's good, it works. And I'm like, that's not how this works. Like, you know, I'm going to be here to review your stuff, to ensure that the quality is there, and to also, the same time, how you understand why, like, Augustus was saying earlier, why are you making it this way? If you don't understand that, then you need to understand it. If you if you need to help understanding it, then ask, I

</p>
<p><strong>Ryan Burgess</strong><br />
love that too. And I think, like, it's even the the trade offs, right? Like it's understanding the trade offs of, like a legacy code base versus, like the latest and greatest technology. Like, I think there's nothing wrong with being on the latest and greatest, but we also need to be realistic that that's not the case in every company, or it just depends on the time, right? Like it's the life cycle of a code base. Is like, we might move to react today and then tomorrow. Everyone's like, oh, svelte, that's the new hotness. It's like, well, we just moved to react, and you're going to want to get years out of that code base, right? Like, you don't want to have to be changing constantly unless there's a very good reason, right? Like, there, there can be compelling reasons that you're like, okay, yeah, we're going to make that trade off, and we're actually going to sink our teeth into, like, rewriting something. But it's, it's understanding a lot of those real world trade offs at scale, all those types of things, is often what's missing. And I say all these things also not expecting someone to know all them like this. This comes with years of experience too. But I think that there are ways that boot camps are getting creative, like even just helping with the interviews. There are ways in which that, you know, doing joint projects, things like that that are helping them. Shashi, I think the thing that I was most impressed with is the mentorship that you've been doing for a boot camp and I would love to just, I'm not going to explain it, because you'll do a better job than that, but I was very much impressed with the approach that you took, and I'll let you speak to that. And I'm curious while you're speaking. Into, like, what you're doing is also, how did you come to that decision? Like, how did you, you know, decide to say, I'm going to help with this and, like, how's it going? You know, I just want to hear a little more of that. I think this is a really great topic for us to cover.

Shashi Lo  
Yeah, so as I was talking to a lot of self totters and boot campers and reviewing their portfolios and whatnot, there was a common thread that their projects were just not good enough. A lot of these individuals, they want to get a job right and they want to get a job soon. But some individuals that I actually mock interview, I let them know right away. I'm like, you don't have the experience that I would be looking for to even hire an intern. You don't have an understanding of a process you the projects you're working on, they're very basic, like it's not even a To Do app. It's just a basic personal app that has no authentication. It's just getting an API displaying the data and maybe a few custom components, right? That nowadays, I don't think that flies anymore. I think you need to definitely a lot more than that. And as I was seeing these individuals, I was like, there's a missing piece to this, like the ones that are getting jobs, they are maybe one or two or three years into their career switch, and that's why they're getting a job, because they're grinding it out over and over and over on their own. The ones that just graduated or starting, they think they can get it a job within four months, five months, but in reality, it's too difficult, unless if you have a background in doing development already. And so I said I was thinking that, you know, I felt like this. There was a void from boot camp to first job or self talk to first job, and that's why I created grand survivor. It was, I was like, You know what? Let me try this out. I have a friend that needs an app, and I asked him if he was willing for me to create a discord development group so that we could build it for him for free. And I was like, it's a win win, because he doesn't pay anything. We get experience, and I'm going to lead this. So I wanted to create this in a way where they can get the real life experience of being an engineer on a team. And so I set forward with creating a corporate process, having them go through the full motion of a project, process, planning, code reviews, stand ups and sprint boards, all of that. And I and as we were going through these, this whole this project, I could see these individuals on how much of a gap they had some of them, I thought that, you know, they would have some experience in doing some of this. They didn't have any of it, and some that that didn't had a little bit, which is great, but it was so interesting because it was a mixture of self offers and boot campers. And the boot campers, I thought that, okay, they've gone through boot camp. Maybe boot camp has taught them a little bit more of going through the motions of, you know, completing a project, but, but they, they didn't have this process in place at all, not, not even a little bit. And so I was kind of appalled, because I was like, Okay, so we're all learning from ground zero then, which is great, but the first thing we did was just plan, like, why we're doing stuff, research, technologies, and just that alone for these individuals, they're like, Yeah, we're so used to just going in right away and picking Our application and jumping in and building right away. And now I've been planning it, and I said, That's great that you're learning this, because then they're understanding why we're using this technology, how we're going to build this, and it's going to help down the long run. Because as we know, planning and changing your plans is a lot easier than planning changing your code as you're developing. And so as we're going through these motions, the another big thing was communication, right? We all have worked with each you know, other individuals, whatnot. But when you work on a development project, it's completely different. What I have is, we have a industry designer. She's very she's experienced. I worked for before. And then we have myself, which is experienced engineer, and I act as the engineering manager and the product manager. And then all these juniors are developers or technical documentation writers or access league expert. So it's very cross functional. And so I said, You know what? I'm going to split these individuals up into pods. I have the UX e pod, the UX engineering pod and the functional pod, which are the function of friend and engineers, and we had a back end pod. So all these three pods, even though they all felt like they were a full full stack, I said, No, you stay in your lane. To learn to stay in your lane, because that's most likely what you're going to do when you get a job. And you're going to learn to communicate cross functionally when you need help with the database. Guess who you go to? Most of the back end engineers when you need help with the components and the UI components. Who do you go to the front end, the UX engineers. So this way they kind of learn how to communicate across, you know, the spectrum, and it wasn't just one team that doing everything. It was no, oh, I need to go and communicate with them. Okay? So I created separate channels for them so they can communicate on their own, but also a group channel where they can communicate with the overall group. So this allowed that communication flow to happen, where it's siloed, where we can just talk about the individual things we're working on, or as a group, we can do that. And at first it was really hard for them, like, they were like, Oh my gosh. Like, I mean, I've done this before, but this is a totally different level. And I was like, this is the easy part. Like, like, you're doing this with me. This is easy. Wait till you get on the job like that. Wait till you get stakeholders, you know, management, so that's negative and harder. So along the way, they have learned all to do all this stuff. And the, the last thing I'll bring up is the code review part we would do sprint planning, right? And I say, okay, use the Fibonacci scale. Give me an estimate of how long you think the stick is going to take. Okay? You think it's going to take half a day? Okay, let's go with that until this Sprint's done. And it took them two weeks. That's a code review and, you know, and they didn't understand the process yet of and the coding standards, of what I was expecting, expecting current structure, unit testing, ensuring that everything was tested, understanding why, and just coding, formatting and all of that. It was just, it took a lot more time than they thought. And so they started to understand that it's, this is not just a hackathon project where we're just going to get it up there quickly. No, we're going to do this well, we're going to do it right, and we're going to learn the why.

</p>
<p><strong>Ryan Burgess</strong><br />
I love so many things that you just said, and I know we've talked

</p>
<p><strong>Augustus Yuan</strong><br />
so incredible. Yeah, it feels like a mini startup, almost like, you know, but a lot more focused on this one example app, and you're juggling, like, product manager and engineer. Em, I love how you like, made them stay in their lane, because that is like, a very like, I mean, it feels weird because you're all on the same team, but like, it's a very real thing. Like, when you have other people, like, you have other responsibilities, but then you're also assisting with a project that is cross functional. I freaking love that. One

Shashi Lo  
thing that they struggled with was tickets. Like I would tell them, hey, just build the button component. Okay, just build the bond component. They'll go build the whole page. I'm like, no, no, no. Scale back. The ticket says only to do this. It has the screenshot of the page. It doesn't tell you to be the make the whole page. Okay? The tickets very explicit, and that's something that they're trying to understand and grasp at the same time too. That's

</p>
<p><strong>Ryan Burgess</strong><br />
actually amazing. That even calling that out, because I think a lot of it times, even when I'm building something by myself, I make all those mistakes where it's like, oh, I'll just kind of code it all. I don't need a design. I'll just kind of go on the fly. And it sometimes works. You know, taking a step back and doing all that upfront planning, like you said, helps so much there. And like, having the disciplines too, where you can have someone focused and really thinking about that one component. And how does it work with the bigger picture of things, like, you're splitting up the work accordingly, and that's how we do it at work, right? Like, that's why we split up work too. You have people really thinking about something, and how does this fit in the overall project? I love that I had some follow ups. Maybe about the group too. Is like, how, how big is the group? How long do you envision this project running for? Is there a completion time? Like, is it handing off to the client and then it's done? Like, how does all that work?

Shashi Lo  
Yeah. Well, currently the team, I think, we have two or three UX engineers, and then we have two front end engineers. We have my my designer and myself, and then we have a web accessibility expert. I am looking to add a few, I put it, put it off an x that we lost one member, which is great, because he got an internship. It's exactly what I want from this project. Is for me to kick you off this project because you got a job. So that's what it is. And so we have two week sprints. This was my fault too at the beginning. Because I was like, Hey, this is a free flowing project. Do it when you can, whenever you have time, just tell me when you can get it done, right? There was no pressure get it done. And I was like, Oh, that's true. Because for me too, same thing. If I have no deadline, I'm just gonna put in the back burner. So we started to do two week sprints. We do have a deadline to release a. Our Alpha product before the NFL season, because you cannot work or do this application in the middle of the season, of the NFL season, which is, I think it's early September. It has to start the beginning. So we want to try to get it done by mid August, so we could do testing, testing of our client, and then ensuring that we're getting the bugs and doing bug bashing stuff like that. So once that's done, then as this application goes on, we want to enhance things. And the ultimate goal is to make this a SaaS product where we can start selling seats and other individuals can come and use this tool to start doing their survivor pool for the NFL team. And if that works out well, then expanding it to other sports and whatnot too. I want to create a way like my ultimate goal is to create, like a junior engineering bench where this application and other applications that we build can can receive some income so that we can pay these individuals to work on these projects. And then as they're working on this they're getting experience, right, real world experience, and hopefully somebody will hire them off because of the experience they're getting, and then we can refund them again and get new members to come in. And do you know, go through this process again again, right? I feel like there's just that void of, how do you get somebody prepared for the real world when average time takes them a year to two to three years to get there, depending on availability and effort and stuff like that, whereas this project, I think the barrier is when self talkers and boot campers try to learn, they have to pay bills right? And what better way to do that than to join a project that will pay you to do and to learn and go along the way and to increase your ability to land a full time job? So I'm hoping, no, those are big planes. We'll see where it goes. No,

</p>
<p><strong>Ryan Burgess</strong><br />
I love the vision for it, and I see it like I do actually see the value in it, even if I'm not getting paid as the, you know, junior or, you know, straight out of boot camp. I love the idea that, yeah, like, eventually, if we can start to make money as as a group, that's amazing. But I think if I'm putting myself back to when I first learned, I did a ton of development after hours all the time, like just trying to own that skill, and a lot of the skills of like, practical process, like, you know, following sprint, Scrum, JIRA tickets, all those types of things I never got. You just didn't know you're like, but I develop it doesn't matter as I built this, and you don't think about those things. And so I think, like, getting that real world experience is worth so much. Like, it's like, it's worth paying for, right? Like, you're paying for this like experience. And getting to work with someone like you Shashi is like, amazing too, because you're like, you're very senior, you've seen a lot of these things. You know what people are looking for on the job. And I think that in itself, is critical too. So I think it's like, cool, especially not getting paid is amazing. But then if you can take it to that much further, where you're like, cool, this is also something that you're getting paid for. I love it like, I love that vision. And I think that this really helps tighten the gap between someone who has built up the skills and is like, I'm ready put me in, and no one's putting them in. Like, that's the tough thing. I

Shashi Lo  
think that is the tough thing is, when I talk to a lot of the boot campers and self talkers, they feel the same way. They're like, I'm prepped, I'm ready to go. I'm like, How come nobody's hiring me? Right? And then when you talk to them, you're like, oh, because you're missing the process, you're missing quality work, you're missing the knowledge and know how and the there's just no real world experience. You everything you've done is a personal project. I'm sure you've gone through the boot camp and done one group project, but from what I can see, it's just not there yet, right? And when everybody, when anybody asks me to review the portfolio or interview them, I'm very honest with them, and I say I'm sorry, but you're just not good enough yet. I don't say you should pivot or not. Sometimes I do per se. We had an individual in our group. He wanted to become an engineer, and as we're going through the planning process, he was like, I love documentation. I love planning. I was like, you hear yourself, dude. He's like, what you loved to document and and right you should pivot to becoming a technical writer or documentation engineer. And he said, I didn't know such thing existed. I thought the only path was to become an engineer, a software engineer. And I said, no, there are so many avenues, so many roles in technology that you can pivot to or you can. Go for like, whatever your background is. If you can find something that's similar in technology and go for that role, then you can do that. So in my project, when I identify them for these individuals, I say, Hey, if you want to do that, I'll pivot you to do that role for this project so you have experience and that individual that got the job as a technical writer. He did that. We did that for him. And so he created our storybook. He added all of our documentation in, um, we put it up. He documents all of our meetings and stuff like that. And so he now he has that real world experience of doing that role. And it was so big, because when he went to interview for that company, they were like, you stood out so much because of what you went through. I don't know if it was this project specifically, but I'm pretty sure it was. And, like, you already did this role, and he just started there, but in talking to him for the first week, he was like, it was Shashi. It was so easy to transition to his company because the sprint board that we had, I wasn't, like, surprised by it, the task that was given, I wasn't surprised by it and the the syncs, like the async and the synchronous stand ups, I wasn't surprised by that. I knew exactly what to do. I was like, That is music to my ears. You

</p>
<p><strong>Ryan Burgess</strong><br />
prepared him for that role. And I love to just the discovery of that passion too, right? Because I think even when you're any of us, like as a developer, you start to have certain things that you care about. It could be you're the accessibility person, or you cares deeply about the UX, or, you know, the performance there's, there's layers upon layers that you can start to find your passion writing documentation. I love. When I'm hiring someone on a team, is finding those individual passions, because it helps make up the team better, right? Like it's, if someone cares about documentation, they're gonna play that role more, or hold the team accountable to better documentation, or better writing tests, all those things. And to me, you stand out more too, right? Like you're you found something you're passionate about, it's gonna stand out and show up in the interview. And if that's a skill that we're looking for, you're like, great. You're not just, like, bringing the same technical skills that a lot of people already have. You're demonstrating that. So I think like that in itself, was really cool to hear that from that story as well. I'd be curious too, is, so this is the first time that you've done it. Shashi, what's the plan? Are you already starting plans for, like, another cohort to kind of come through? What's the next steps?

Shashi Lo  
Yeah, so this project, I think it's going to continue on. We really want to get it to be SaaS ready, and it's not going to happen this year like I don't want to rush anything. It's probably going to happen next year. So it's going to continue to move forward towards that a second cohort. I want to continue this and maybe next year, start a different one, for a different project. I have another individual that wants a different kind of application that I think fits the same mode, but it's been tough too, you know, like I'm full time at Microsoft. I do this on the side. One thing for me is, I know response time is very important. So when, whenever these individuals ask questions or need code reviews, I try to be there as soon as I can, because they can get moving. If I'm a day too late, they're, you know, falling behind, and that can't happen, right? So it's been tough. So until this one goes into maintenance mode, then I'll start another one. But this project, I feel like, as we lose members, I just keep adding more, because there's so many things to do and so many features you can add in right like there, I want the ability to even add AI later, like predicting teams that could win, giving us an analysis on these particular things, automating things more so that it's a lot simpler. Like there's so many bells and whistles that we can add to this that can make it more can make it fun, more functional, also a better user experience. But yeah, I think I do want to continue. It is a passion of mine to help individuals, so I want to continue to move forward with this project as far as I can. There is no site of end, and we're gaining a lot of traction now from individuals that want to come and help, even in industry state industry experts that want to come and help. I'm like, That's awesome. Like, that's great that you guys want to come and see what you can help us with. And like, as these things grow and there's more exposure and stuff like that, like you said, Ryan, like I feel like it is a missing piece as well, and I want to kind of continue to feel it out and see where it goes. Because I do feel that if this becomes something fruitful, that it could be even bigger, it can help even more people, because there. A lot of people that like, I think we know a lot of boot campers, self taught tours that quit right after a while. They're like, this is too much. I had no more time and no more effort. I'm burnt out. I have no direction. And hopefully this is something that can fill that void. Saying, Hey, like, I understand you're at that point, but now this project can help you fill that void. Can continue, you know, to make progress for yourself and teach you more so that you can land that job. And one thing I want for this is also it's this project is building a network like we're starting to make connections with other companies and other individuals and whatnot, and it is just growing. And anybody that comes on to be a part of this is going to be a part of that network, and it's going to allow you to tap into these connections we have, for potential partnerships, for potential job opportunities, and so much more. I

</p>
<p><strong>Ryan Burgess</strong><br />
love it. Like, I mean, this is why you and I are talking, because, like, hearing this project, I was just like, Yeah, this is amazing. And, you know, I love the direction it's going. I'm curious too. Like, yeah, you're balancing this on a full time job. I'm curious about your time commitment. Like, what it is like, it sounds like it's, you know, an ongoing almost sounds daily that you're you'll probably have to give some of your time for this. And then what's the commitment for the people on the project too?

Shashi Lo  
Yeah, my I always say, like, I try not to put too much time into this. But, you know, anything that I enjoy, I put way too much time into it. The good thing is, I try to stay off on the weekends, because, you know, with my family and whatnot, and I tell these individuals too, I say, do not work at weekends. But some of them like, that's the only time I can work. And like, that's up to you. It's doing it. I think the awesome part is, I tell each individual that is accepted in is, it's up to you how much time you want to put in. You know, this is non paid. This is all experience. You tell me how much time you want to put in, and I'll give you the amount of tickets that fill in two weeks, which is a sprint, right? And then you'll know at that point of how many tickets you can actually do per sprint. Then, then then we start to understand your velocity and whatnot. So if somebody tells me they only have like, four hours a week, I'm like, that's cool. I'll give you one ticket. And if you get more done, just take it from the backlog, right? And if, other than just say, Hey, I could do 20 to 40 hours, it's cool. Then, you know, I'm going to use you more, utilize you more, communicate with you more and whatnot. So it's really free flowing. I don't want to cap them and say, Hey, like, this is due tomorrow and it's going to be due tomorrow. I really want to set the standard that, hey, these two experience, if you can't get it done, communicate early that you can't get it done, then we will repurpose your ticket so that we can re resource that like this is how real world works at the same time, is, don't think you're gonna finish it all if you really can't, and understand your thresholds, right? If you have vacation whatnot, communicate that to the team. Same thing as real world, right? Right? On the job you we just have to communicate. So the you know, the biggest thing is that so for myself as well, like, I try not to do anything after hours. But when these individuals are working out there as they have questions, I'm on my phone, you know, I answer them and whatnot. But on the weekends, yeah, I try to stay away as much as possible. I try to not work on weekends at all. If I really have to, I will. But other than that, like it's structured in a way where you give what you want and you get what you what you you know, put in, and if you put in more, you're going to get more. But if you don't, that's, that's totally up to you. I'm going to give you what you know, what you can handle, and whatnot. There's

</p>
<p><strong>Ryan Burgess</strong><br />
some set balance. I think you are also demonstrating good balance too for your for yourself, but then for others too, to realize that, like you, you can get sucked in quickly. I pretty sure all three of us have done that in at some point in time in our career, where you get sucked in and you just like, it's a passion, right? Like, I started coding because I loved building things, and so I'm gonna keep building and enjoy that. And sometimes it gets away with me, and like, I put too much time in, and it's, it is nice to try and understand what that healthy balance is too, because it is important to take a breather from it, like, it's like you will actually be more productive and all the things. And so I like that you're even teaching that too, and that also you have to depend on each other as a team, right? Someone might be on vacation or, you know, someone's pulled away on three other projects, so they can only commit five hours this week. And it's kind of cool to get a sense of that. Yeah, I love all these like world, world experiences. I feel like. If you had someone interviewing with me and that they were like, going through that, that's the type of experience that I'm I'm feeling more confident in a in a candidate at that point, so that, like, I'm hearing all the right things, which is really cool. Yeah, I

Shashi Lo  
always tell them, like, I'm hoping that this, this whole project de riskes them, because as and I always tell them, when you have an interview, tell them about this project like in detail as much as you can, because if you tell them about this project, they're going to be like, Whoa. You have a lot more experience than I thought you did, and that is a really good thing, because we just had an individual he went to a meetup, and he said he talked to maybe eight people or so, and he was just telling them what we're doing, like, with the sprint board, with unit testing and team communication, and they're like, like, wide open eyes and everything. And I was like, exactly it's working. Like, this is gonna work as it just gonna come down to timing and opportunity and whatnot. But when you get that opportunity and you speak about what you're doing here, and what you're what you're taught, and all the things that you're learning, I think that this is going to set yourself apart from other candidates, because you're getting the real world experience by going through this project, opposed to other individuals, where they're just still doing side projects, or maybe they're doing a project with another individual, but they don't have this structure in place.

</p>
<p><strong>Augustus Yuan</strong><br />
I want to kind of, like, echo something you mentioned earlier about, like, soft skills being such an important thing that boot camp I didn't say this, but, like, I do see that as something that boot camps traditionally lack. And actually even, like, new new grads, you know, like, they don't get that experience of, like, communicating and, you know, a huge part of being an engineer is sometimes you need to work with your stakeholders and negotiate requirements. It's not always just like Shashi, I think, you like, brought up a good point where, like, sometimes in a boot camp they'll just be like, okay, hey, you know you didn't do this technically correct. Do that, I'm they have an idea of a technical implementation that they're expecting, but that doesn't really happen in the real world, like all the time, like they'll give you feedback on it, but sometimes deadlines come up, and then you need to tell your Pm, hey, I know we said we want to build this. We can't get there. And then the natural thing is, you cut scope. You start cutting leaves off of the tree, and then you develop a plan of, okay, how can we get to where you want? But I understand you have this deadline for whatever reason, here's what we can get to get there and then work our way there. That's such an important thing that it feels like your project, like gives a

Shashi Lo  
lot of people, yeah, and that that's exactly what some individuals are learning. And it was hard for the beginning, right? It's hard for any individual that doesn't have experience to understand that just communicate. I always tell them, Don't be afraid to ask me questions. Like, I'm not trying to be like the expert here, but if you don't know something, ask if you can't, can't get something done. By the time you told me that you'll get it done, tell me so I can help you find a solution or give you more time, whatever it is, right? Because in the real world, same thing, right? PMS are going to tell you, hey, I need this. And by the end of the week, and you say, I got you. And on, on the fourth day, you're like, I can't get it done. Like, but you should have told me that two, three days ago so I could tell my leadership stakeholders, right? They're stakeholders. They're like, it just goes down the line. It's like, yeah, and that all matters. And these individuals don't understand that. They just think, oh, I have a deadline. It's only for one, a one to one. No, it's like a one to many relationship, where you need to communicate that. And if you say, I can get these two things went out, this third one cool. Let me give you. Let me give that third one to Augustus to take care of. That way you can still get it done on time, right? And so there's just things that they're learning, and I'm like, putting this on them. And the one thing that I try to do for them, too, to make it so real, is scope creep, right? It's bring it in and be like, hey, guess what? Um, actually, this is due in three days now, not not next week. Like, y'all gotta get this done. They're like, wait, what? Like, yeah, get it done. And so creating that, like, real experience, like it brings that stress level to them and whatnot. But I always tell them, this is it's better that you fail with me then go on in the job and failing there with them, because then you fail with me, I will correct you, and there's no harm, no foul. Like you're learning, if you go on the job and you do that, they're gonna be like, Oh, is this person good enough? I don't know. Like, maybe we should let them go after three months a year, or no, whatever it is. But as you're learning with me or on this project, there is no harm, like it's it's just whatever, how much you put in you get, and I think that's the best thing for them. Is as they're learning these skills, they're going to start to adapt to the real world process. And then as they get on the job, they're going to be like, Hey, I already know 60% 80. Percent of this, I'm just learning the rest of this. The one thing I always see from boot campers and self toppers on why people don't hire them is the amount of time it onboards them, right? Like, you bring them on and it takes so much time to onboard it's like, hey, oh, you don't know what Agile is. Oh, great. Like, it's gonna take a couple weeks. You don't know how to do get merges or get conflicts. Oh, great. Like, that's gonna take a long time too. Like we're doing all of that in this process because people are creating features everywhere, like there's so many moving pieces, and along the way I'm doing, like I'm providing tough love to them. Is when they ask me, How do I do this merge conflict? And say, go figure it out. And then after they fail, I'm like, okay, you've tried it. Let me help you out. Let me teach you it, so the next time you learn how to do it. But I wanted you to stress your brain and your abilities until I help you out. Because if I give you this answer, you're not gonna, you know, do it. You know you're not gonna learn from it. But now that you have, hopefully next time you learn from it and you grow from it, and I it has been working. These individuals have been growing slowly but surely. And I think that's the biggest thing for me, is that their skill sets have been improving week

</p>
<p><strong>Ryan Burgess</strong><br />
by week. I love all this. I think, like I had the opportunity to speak with your group and just was, I was really impressed with even some of the questions they asked me. They were very thoughtful. And just like hearing about the project and how they're thinking about it, was really cool. So I definitely implore people to do things like this, get creative and, you know, to build that experience up. I think it goes a really long way. I think it's probably a great time for us to dive into pics. This was, you know, a great topic to cover in each episode. The front end Happy Hour podcast. We like to share things that we found interesting with all of you. Sometimes it's related to topic. Oftentimes not Augustus. You want to start us off? Yes,

</p>
<p><strong>Augustus Yuan</strong><br />
yes, I only have one pick today, but I think it's a cool pick.

Shashi Lo  
It's this in Japan,

</p>
<p><strong>Augustus Yuan</strong><br />
I don't know. I think this type of engineering is just so fascinating, like this, these small, small things that help the world. Um, in Japan, they made the spoon that enhances salt taste. So what it does is it like it takes in a battery into the spoon, and I guess, how your tongue receptors taste saltiness. There's like ions, and that the spoon mimics that kind of feeling. And so what it does is, like, when you like, put like curry or soup or whatever it will, like, emit those ions into your tongue, and you can it taste the food tastes saltier than it actually is. And so the goal of is to, like, reduce, like, sodium intake. Right now, I think they're selling it in Japan for like, $100 or whatever. But like, I think it's like, this type of engineering is just like, so fascinating to me. It's like, so like, out there, but it just helps, like, imagine if they can do it for sugar, like, help with people who are diabetes. I don't know if that's possible, but just a really cool thing that I saw

</p>
<p><strong>Ryan Burgess</strong><br />
that is very cool. I like that. Shashi. What kind of picks do you have for our listeners?

Shashi Lo  
I will call out one of my picks is usually friend and mentor. I really enjoy that resource for learning. If you want to like work with industry standard designs, friend and mentor has amazing designs and challenges. You can build it any way you want, right? They give you the design. You can choose to use, view, react, next, whatever you want, but you build a full fledged project with the real design. I think that's one of the missing pieces too. Is when you're building a project, you're trying to design on your own, and it's like it's just not that esthetically pleasing, and also the same time, same thing with your code, right? You're just going to design and like, Oh, this is good enough. But when you're working with the industry design, you're it's pushing the boundaries, and it's going to push your limits and your skills, because you you know, conform to the designs and the functionality. So I always enjoy sending people to front end mentor, because it is one of the best ways to learn how to code. Right

</p>
<p><strong>Ryan Burgess</strong><br />
on. That's a good one as well. I have a one pick. It's a blog post that a designer had put together. His name's Nando Costa. It was actually a friend of mine, Jeff zwirner Augustus, knows as well, who sent me this. We were talking a lot about AI and, you know, art and, like, how to craft things with something like, mid journey. And this designer had put together a really great article on prompt crafting, like, really thinking about, like, how you write and to get specific things that you're wanting to create. And there's, there is some thoughtfulness. It's not just like you throw in something in the prompt and it happens, he's got some thinking around it. And I found it really interesting to kind of hear his process and how he's created, like, something like 20,000 some images. And so he's kind of reflecting on, you know, what works and what doesn't. So it was a really cool read. I highly recommend that. I'll obviously share that in the show notes. Shashi. Thank you so much for joining us. This project is so cool. I'm very much impressed with like, what you're doing for the community. How can people get in touch with you? Yeah, I'm

Shashi Lo  
on x at Shashi, who codes and then on LinkedIn Shashi, underscore low. Those are the two places that are easiest to connect with me. And I'm always willing to, you know, provide some feedback and just tips and tricks and stuff as well. People ask me all the time, and I'm like, Yeah, as long as you're willing to ask, I'm willing to provide.

</p>
<p><strong>Ryan Burgess</strong><br />
That's awesome. Well, thank you for all your help, and thank you for joining us today. It was a pleasure having you. For those of you listening, if you want to listen to our podcast, you can find it really wherever we like to share podcasts. You can find it on Twitter, we're at front end. HH, and on YouTube, at front end. HH, any last words? You all

</p>
<p><strong>Augustus Yuan</strong><br />
bring a ding. Ding. Cheers. You.

</p>
`;
        return transcript;
    };